
---

## üß© **Patrones de Dise√±o (Design Patterns)**

Los patrones de dise√±o se clasifican en **tres categor√≠as principales** seg√∫n la clasificaci√≥n de la ‚ÄúBanda de los Cuatro‚Äù (GoF):

---

### 1Ô∏è‚É£ **Patrones Creacionales**

Se enfocan en **c√≥mo crear objetos** de forma flexible y reutilizable.

| Patr√≥n               | Explicaci√≥n breve                                                                                              |
| -------------------- | -------------------------------------------------------------------------------------------------------------- |
| **Singleton**        | Garantiza que exista **solo una instancia** de una clase y proporciona un punto global de acceso a ella.       |
| **Factory Method**   | Define una **interfaz** para crear objetos, pero permite a las subclases decidir qu√© clase instanciar.         |
| **Abstract Factory** | Proporciona una **interfaz para crear familias** de objetos relacionados sin especificar sus clases concretas. |
| **Builder**          | Permite **crear objetos complejos paso a paso**, separando su construcci√≥n de su representaci√≥n final.         |
| **Prototype**        | Crea nuevos objetos **copiando** un objeto existente (clonaci√≥n).                                              |

---

### 2Ô∏è‚É£ **Patrones Estructurales**

Se centran en **c√≥mo se organizan y relacionan las clases y objetos**.

| Patr√≥n        | Explicaci√≥n breve                                                                               |
| ------------- | ----------------------------------------------------------------------------------------------- |
| **Adapter**   | Permite que dos clases con **interfaces diferentes trabajen juntas** adaptando una a la otra.   |
| **Bridge**    | Separa una abstracci√≥n de su implementaci√≥n para que ambas puedan variar independientemente.    |
| **Composite** | Organiza objetos en **estructuras jer√°rquicas** como √°rboles para tratarlos de forma uniforme.  |
| **Decorator** | A√±ade **funcionalidades extra** a un objeto de forma din√°mica sin modificar su c√≥digo original. |
| **Facade**    | Proporciona una **interfaz simple** a un conjunto complejo de clases o subsistemas.             |
| **Flyweight** | Reduce el uso de memoria compartiendo objetos que son similares.                                |
| **Proxy**     | Act√∫a como un **sustituto** para controlar el acceso a otro objeto.                             |

---

### 3Ô∏è‚É£ **Patrones de Comportamiento**

Se enfocan en **c√≥mo interact√∫an y se comunican los objetos**.

| Patr√≥n                      | Explicaci√≥n breve                                                                           |
| --------------------------- | ------------------------------------------------------------------------------------------- |
| **Chain of Responsibility** | Pasa una solicitud a trav√©s de una **cadena de manejadores** hasta que uno la procese.      |
| **Command**                 | Encapsula una solicitud como un objeto para ejecutarla m√°s tarde o deshacerla.              |
| **Interpreter**             | Define una forma de **interpretar un lenguaje o expresiones**.                              |
| **Iterator**                | Permite recorrer una colecci√≥n sin exponer su estructura interna.                           |
| **Mediator**                | Centraliza la comunicaci√≥n entre objetos para reducir dependencias directas.                |
| **Memento**                 | Guarda el **estado** de un objeto para restaurarlo despu√©s.                                 |
| **Observer**                | Un objeto **notifica autom√°ticamente** a otros cuando cambia su estado.                     |
| **State**                   | Cambia el comportamiento de un objeto seg√∫n su **estado interno**.                          |
| **Strategy**                | Define **diferentes algoritmos** y los intercambia en tiempo de ejecuci√≥n.                  |
| **Template Method**         | Define el esqueleto de un algoritmo, dejando que las subclases completen pasos espec√≠ficos. |
| **Visitor**                 | Permite agregar operaciones a objetos sin cambiar su clase.                                 |

---


